{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 CourierNewPSMT;
\f3\fswiss\fcharset0 ArialMT;\f4\fnil\fcharset0 Baskerville;\f5\fnil\fcharset0 Apple-Chancery;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue153;\red26\green26\blue26;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker -}{\leveltext\leveltemplateid1\'01-;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker -}{\leveltext\leveltemplateid101\'01-;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker -}{\leveltext\leveltemplateid102\'01-;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker -}{\leveltext\leveltemplateid103\'01-;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker -}{\leveltext\leveltemplateid201\'01-;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{upper-alpha\}.}{\leveltext\leveltemplateid402\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{upper-alpha\}.}{\leveltext\leveltemplateid602\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker -}{\leveltext\leveltemplateid701\'01-;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker -}{\leveltext\leveltemplateid901\'01-;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\margl1440\margr1440\margb1800\margt1800\vieww16860\viewh13600\viewkind0
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
TextExpander touch SDK\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
(Release notes are found at the bottom of this document.)\
\
Smile provides the TextExpander framework for you to build into your iOS app to provide TextExpander functionality for text entry in your app, subject to the License Agreement below.\
\
If a user of your app has TextExpander touch installed on their iOS device and has "Share Snippets" turned on under "Snippet Sharing," TextExpander touch will write its data to a completed Reminder (iOS 6 & 7) and to a persistent pasteboard (iOS 5 & 6) on exit, and the TextExpander framework will be able to access that data from your app. You inform the TextExpander framework when your app returns to the foreground so that it can update its data if that data has changed while your app was in the background. (If your app was in the background, TextExpander touch might have been the active app.)\
\
The teTouchSDK project is a working example app demonstrating how to add TextExpander functionality to your app.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Prerequisites\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
- Xcode 4.3 or later\
- iOS 5.1 or later\
- TextExpander touch <{\field{\*\fldinst{HYPERLINK "http://smilesoftware.com/cgi-bin/redirect.pl?product=tetouch&cmd=itunes"}}{\fldrslt \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 http://smilesoftware.com/cgi-bin/redirect.pl?product=tetouch&cmd=itunes}}> is needed if you wish to test with your own snippets. Without TextExpander touch, you'll be limited to testing with the default snippets, listed below under Default Abbreviations & Snippets and added via the Defaults.textexpander file.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Getting Started / Build Notes\
\pard\tx144\tx288\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li288\fi-288\sl288\slmult1\sa240\pardirnatural
\ls1\ilvl0
\b0 \cf0 \expnd0\expndtw0\kerning0
{\listtext	-	}Add the TextExpander framework to your project. The framework is unsigned. It will inherit your signature when you build an app linking it.\
{\listtext	-	}You should only include Defaults.textexpander in your app if you allow users to disable TextExpander expansions in your app; otherwise it is provided so you can test the TextExpander framework without TextExpander touch installed (e.g., in the simulator).\
{\listtext	-	}The TextExpander framework requires\kerning1\expnd0\expndtw0  \expnd0\expndtw0\kerning0
Apple\'92s \kerning1\expnd0\expndtw0 AudioToolbox, CoreGraphics, CoreText, EventKit, Foundation and UIKit frameworks. Add these to your project's linked frameworks if they aren't already included.\expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Usage Notes\
\pard\tx144\tx288\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li288\fi-288\sl288\slmult1\sa240\pardirnatural
\ls2\ilvl2
\b0 \cf0 \expnd0\expndtw0\kerning0
{\listtext	-	}Ensure your app calls 
\f1 \expnd0\expndtw0\kerning0
-[SMTEDelegateController willEnterForeground:]
\f0 \expnd0\expndtw0\kerning0
 when returning to foreground; if you have multiple delegates, it's okay but not necessary to call multiple times\
{\listtext	-	}To add TextExpander functionality to a 
\f1 \expnd0\expndtw0\kerning0
UITextView
\f0 \expnd0\expndtw0\kerning0
 or 
\f1 \expnd0\expndtw0\kerning0
UITextField
\f0 \expnd0\expndtw0\kerning0
, instantiate 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \expnd0\expndtw0\kerning0
 and set it as the delegate of the 
\f1 \expnd0\expndtw0\kerning0
UITextView
\f0 \expnd0\expndtw0\kerning0
 or 
\f1 \expnd0\expndtw0\kerning0
UITextField
\f0 \expnd0\expndtw0\kerning0
\
{\listtext	-	}If the user has specified formatting for a snippet, the snippet's text attributes are included 
\f1 \expnd0\expndtw0\kerning0
if (iOS >= 6.0 && theView/Field.allowsEditingTextAttributes && !SMTEDelegate.expandPlainTextOnly)
\f0 \expnd0\expndtw0\kerning0
.\
{\listtext	-	}To add TextExpander functionality to a 
\f1 \expnd0\expndtw0\kerning0
UIWebView
\f0 \expnd0\expndtw0\kerning0
, instantiate 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \expnd0\expndtw0\kerning0
 and set it as the delegate of the 
\f1 \expnd0\expndtw0\kerning0
UIWebView
\f0 \expnd0\expndtw0\kerning0
. If the user has specified formatting for a snippet, the snippet's text attributes are included 
\f1 \expnd0\expndtw0\kerning0
if (theKeyEvent.target.value is undefined && !SMTEDelegate.expandPlainTextOnly)
\f0 \expnd0\expndtw0\kerning0
. (That is, formatting is allowed if the typing is 
\b \expnd0\expndtw0\kerning0
not
\b0 \expnd0\expndtw0\kerning0
 in an 
\f1 \expnd0\expndtw0\kerning0
<input type="text"> 
\f0 \expnd0\expndtw0\kerning0
or
\f1 \expnd0\expndtw0\kerning0
 <textarea>
\f0 \expnd0\expndtw0\kerning0
)\
{\listtext	-	}To add TextExpander functionality to a 
\f1 \expnd0\expndtw0\kerning0
UISearchBar
\f0 \expnd0\expndtw0\kerning0
, instantiate 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \expnd0\expndtw0\kerning0
 and set it as the delegate of the 
\f1 \expnd0\expndtw0\kerning0
UISearchBar
\f0 \expnd0\expndtw0\kerning0
\
{\listtext	-	}To add your own delegate to a UITextView/Field/SearchBar, call 
\f1 \expnd0\expndtw0\kerning0
-[SMTEDelegateController setNextDelegate:]
\f0 \expnd0\expndtw0\kerning0
 on the instance you created. Your delegate will be called after TextExpander has a chance to process the delegate calls. In the 
\f1 \expnd0\expndtw0\kerning0
shouldChangeText/CharactersInRange:
\f0 \expnd0\expndtw0\kerning0
 call, you can examine 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegate.isAttemptingToExpandText 
\f0 \expnd0\expndtw0\kerning0
to see if TextExpander is going to expand a snippet based on the current character(s) being inserted. Returning 
\f1 \expnd0\expndtw0\kerning0
NO
\f0 \expnd0\expndtw0\kerning0
 will prevent that snippet expansion.\
\pard\tx144\tx288\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li288\fi-288\sl288\slmult1\sa240\pardirnatural
\ls3\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	-	}A single 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \expnd0\expndtw0\kerning0
 can service many 
\f1 \expnd0\expndtw0\kerning0
UITextViews
\f0 \expnd0\expndtw0\kerning0
, 
\f1 \expnd0\expndtw0\kerning0
UITextFields
\f0 \expnd0\expndtw0\kerning0
, 
\f1 \expnd0\expndtw0\kerning0
UIWebViews
\f0 \expnd0\expndtw0\kerning0
, and 
\f1 \expnd0\expndtw0\kerning0
UISearchBars
\f0 \expnd0\expndtw0\kerning0
. If you use 
\f1 \expnd0\expndtw0\kerning0
setNextDelegate
\f0 \expnd0\expndtw0\kerning0
 for multiple views or fields, please be sure to test the view or field passed to your delegate and respond accordingly.\
{\listtext	-	}Look at the example app's file tetestViewController.m to see examples of all these.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Handling Attributed Text\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
As of iOS 6, UITextView and UITextField both implement an 
\f2 \expnd0\expndtw0\kerning0
attributedText
\f0 \expnd0\expndtw0\kerning0
 property. Even if your app leaves all the text in the view/field formatted the same way, TextExpander has no way to know that, so in order to retain any formatting of the existing text when it performs expansions, it inserts the snippet text into an 
\f2 \expnd0\expndtw0\kerning0
NSMutableAttributedString
\f0 \expnd0\expndtw0\kerning0
 copied from 
\f2 \expnd0\expndtw0\kerning0
attributedText
\f0 \expnd0\expndtw0\kerning0
, then calls 
\f2 \expnd0\expndtw0\kerning0
setAttributedText:\

\f0 \expnd0\expndtw0\kerning0
\
However, 
\f2 \expnd0\expndtw0\kerning0
setAttributedText:
\f0 \expnd0\expndtw0\kerning0
 has some undesirable Undo/Redo side-effects:\
    - it clears the Undo state (unlike 
\f2 \expnd0\expndtw0\kerning0
setText:
\f0 \expnd0\expndtw0\kerning0
)\
    - it locks up if called during an Undo or Redo operation\
\
If your UITextView does not offer 
\f1 \expnd0\expndtw0\kerning0
allowsEditingTextAttributes
\f0 \expnd0\expndtw0\kerning0
 then TextExpander will expand only the "plain text" versions of snippets but, as mentioned above, it uses 
\f2 \expnd0\expndtw0\kerning0
setAttributedText:
\f0 \expnd0\expndtw0\kerning0
 to retain existing formatting. To avoid calls to 
\f2 \expnd0\expndtw0\kerning0
setAttributedText:
\f0 \expnd0\expndtw0\kerning0
 you can subclass UITextView or UITextField and implement these two methods:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f2 \cf0 \expnd0\expndtw0\kerning0
-(NSAttributedString*)textExpanderAttributedString;
\f0 \expnd0\expndtw0\kerning0
\

\f2 \expnd0\expndtw0\kerning0
-(void)textExpanderSetAttributedString: (NSAttributedString*)newText;
\f0 \expnd0\expndtw0\kerning0
\
\pard\tx529\pardeftab529\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
As of SDK version 2.0.1, TextExpander will prefer those methods over 
\f2 \expnd0\expndtw0\kerning0
attributedText/setAttributedText:
\f0 \expnd0\expndtw0\kerning0
 if your UITextView/Field implements them.\
\
In the simplest case, where your view is all formatted the same way, these methods can be as simple as:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f2 \cf0 \expnd0\expndtw0\kerning0
-(NSAttributedString*)textExpanderAttributedString \{\
	return self.attributedText;\
\}
\f0 \expnd0\expndtw0\kerning0
\

\f2 \expnd0\expndtw0\kerning0
-(void)textExpanderSetAttributedString: (NSAttributedString*)newText \{\
	self.text = [newText string];\
\}
\f0 \expnd0\expndtw0\kerning0
\
\pard\tx529\pardeftab529\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
(Note: To avoid locking up when performing a snippet expansion Undo using 
\f2 \expnd0\expndtw0\kerning0
setAttributedText:
\f0 \expnd0\expndtw0\kerning0
, TextExpander uses 
\f2 \expnd0\expndtw0\kerning0
dispatch_async(dispatch_get_main_queue(), ^\{ blah setAttributedText: blah \});
\f0 \expnd0\expndtw0\kerning0
 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
\
Supporting Fill-in Snippets\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
The above instructions support normal snippets, where the abbreviation characters that a user types are immediately expanded to snippet content. TEtouch 2.0 and above also supports fill-in snippets. Fill-ins allow the user to set up a longer snippet with a one or more variable fields embedded, which can be text fields, conditionally included sections, and popup menus to choose among selected options.\
\
The fill-in process involves the use of x-callback URLs (thanks Greg Pierce of Agile Tortoise!) to switch to the TextExpander touch app, where the user fills out field values, then a switch back to your app, where the completed text is inserted.\
\
To support fill-in snippets, your app needs to:\
\pard\tx144\tx432\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li432\fi-432\sl288\slmult1\pardirnatural
\ls4\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	1.	}Provide a URL scheme for fill-in snippet completion via x-callback-url. (Leaving this nil will avoid the fill-in process, %fill% macros in the snippet will be replaced with (field name).)\
\pard\tx720\tx1080\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li1080\fi-1080\sl288\slmult1\pardirnatural
\ls5\ilvl1
\f1 \cf0 \expnd0\expndtw0\kerning0
{\listtext	A.	}
\f0 \expnd0\expndtw0\kerning0
Set the 
\f1 \expnd0\expndtw0\kerning0
fillCompletionScheme
\f0 \expnd0\expndtw0\kerning0
 property of the 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \expnd0\expndtw0\kerning0
 \
\ls5\ilvl1
\f1 \expnd0\expndtw0\kerning0
{\listtext	B.	}
\f0 \expnd0\expndtw0\kerning0
Add the scheme to your app's Info in Xcode under "URL Types" (if not using an existing URL scheme -- see note below)\
\pard\tx720\tx1080\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li1080\fi-1080\sl288\slmult1\sa240\pardirnatural
\ls5\ilvl1
\f1 \cf0 \expnd0\expndtw0\kerning0
{\listtext	C.	}
\f0 \expnd0\expndtw0\kerning0
Implement application:openURL:sourceApplication:annotation: or application:handleOpenURL: in your app delegate, and call the SMTEDelegateController's handleFillCompletionURL: with any URL's that have that scheme (or which meet the criteria as described in the note below)\
\pard\tx144\tx432\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li432\fi-432\sl288\slmult1\pardirnatural
\ls6\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	2.	}Implement the 
\f1 \expnd0\expndtw0\kerning0
SMTEFillDelegate
\f0 \expnd0\expndtw0\kerning0
 protocol to allow the SDK to return first responder status to the correct text item to insert a completed fill-in snippet.\
\pard\tx719\tx1079\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li1965\fi-1966\sl288\slmult1\pardirnatural
\ls7\ilvl1
\f1 \cf0 \expnd0\expndtw0\kerning0
{\listtext	A.	}
\f0 \expnd0\expndtw0\kerning0
Set the 
\f1 \expnd0\expndtw0\kerning0
fillDelegate
\f0 \expnd0\expndtw0\kerning0
 property of the 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \expnd0\expndtw0\kerning0
 with your 
\f1 \expnd0\expndtw0\kerning0
SMTEFillDelegate
\f0 \expnd0\expndtw0\kerning0
 implementing object\
{\listtext	B.	}Set the 
\f1 \expnd0\expndtw0\kerning0
fillForAppName
\f0 \expnd0\expndtw0\kerning0
 property of the 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \expnd0\expndtw0\kerning0
 with your app's name (eg. "SuperTyper"). This will appear in the fill-in view's title, something like "SuperTyper fill-in: [fill abrv]"\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
Note that you can use an existing URL scheme as your 
\f1 \expnd0\expndtw0\kerning0
fillCompletionScheme 
\f0 \expnd0\expndtw0\kerning0
if you want to. The callback URLs will look like these:\
\pard\tx144\tx288\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li288\fi-288\sl288\slmult1\pardirnatural
\ls8\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	-
\f1 \expnd0\expndtw0\kerning0
	}
\f0 \expnd0\expndtw0\kerning0
fillCompletionScheme://x-callback-url/SMTEfilled?textID=[text area ID]&loc=[offset into text]&format=[1|0] \
{\listtext	-
\f1 \expnd0\expndtw0\kerning0
	}
\f0\i \expnd0\expndtw0\kerning0
the above, with, possibly: 
\f1\i0 \expnd0\expndtw0\kerning0
&cursorPos=[adjust count]&selLen=[selection range if not empty]
\f0 \expnd0\expndtw0\kerning0
\
{\listtext	-	}
\f1 \expnd0\expndtw0\kerning0
fillCompletionScheme://x-callback-url/SMTEfillcanceled?textID=[text area ID]&loc=[offset into text]
\f0 \expnd0\expndtw0\kerning0
\
{\listtext	-	}
\f1 \expnd0\expndtw0\kerning0
fillCompletionScheme://x-callback-url/SMTEerror?textID=[text area ID]&loc=[offset into text]&error-Code=NN&errorMessage=bad+thing+happened\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f0 \cf0 \expnd0\expndtw0\kerning0
\
So you can easily examine the URL for the presence of 
\f1 \expnd0\expndtw0\kerning0
x-callback-url 
\f0 \expnd0\expndtw0\kerning0
in the URL host and 
\f1 \expnd0\expndtw0\kerning0
/SMTE
\f0 \expnd0\expndtw0\kerning0
 as the prefix of the URL path to determine whether or not a given URL is a fill-in callback to your URL scheme.\
\
The main point of the 
\f1 \expnd0\expndtw0\kerning0
SMTEFillDelegate
\f0 \expnd0\expndtw0\kerning0
 protocol is that, during the fill-in process, the TEtouch app gets activated. Since your app loses focus temporarily, iOS might unload your app, so to insert the filled-in snippet text at the correct location in your app, you must re-activate the text area and tell TE's SDK . The SDK will insert the fill text at the offset where the snippet was activated.\
\
In most cases, iOS will not unload your app in the short time it takes the user to fill the fields, so your 
\f1 \expnd0\expndtw0\kerning0
SMTEFillDelegate's 
\f0 \expnd0\expndtw0\kerning0
implementation of 
\f1 \expnd0\expndtw0\kerning0
makeIdentifiedTextObjectFirstResponder:fillWasCanceled:cursorPosition: 
\f0 \expnd0\expndtw0\kerning0
generally may not need to do any work at all (other than returning the appropriate value) in cases where your app has not unloaded.\
\
In case your app does get unloaded, you should save whatever text the user was typing when the fill-in snippet was triggered. Your app probably already does this, but the optional 
\f1 \expnd0\expndtw0\kerning0
prepareForFillSwitch:
\f0 \expnd0\expndtw0\kerning0
 method gives your app a chance to save state just before the URL which opens TEtouch is opened, or to return 
\f1 \expnd0\expndtw0\kerning0
NO
\f0 \expnd0\expndtw0\kerning0
 to abort the process at the last moment.\
\
The 
\f1 \expnd0\expndtw0\kerning0
SMTEFillDelegate 
\f0 \expnd0\expndtw0\kerning0
methods are straightforward for 
\f1 \expnd0\expndtw0\kerning0
UITextViews
\f0 \expnd0\expndtw0\kerning0
, 
\f1 \expnd0\expndtw0\kerning0
UITextFields
\f0 \expnd0\expndtw0\kerning0
, and 
\f1 \expnd0\expndtw0\kerning0
UISearchBars
\f0 \expnd0\expndtw0\kerning0
. You make up some kind of name to identify the object, like 
\f1 \expnd0\expndtw0\kerning0
"mainTextArea"
\f0 \expnd0\expndtw0\kerning0
. When your app is re-focused and the filled-in snippet text is ready to be inserted, you only need to provide the appropriate UIKit object and make it become first responder in your implementation of 
\f1 \expnd0\expndtw0\kerning0
makeIdentifiedTextObjectFirstResponder:fillWasCanceled:cursorPosition
\f0 \expnd0\expndtw0\kerning0
.\
\
However, for 
\f1 \expnd0\expndtw0\kerning0
UIWebViews
\f0 \expnd0\expndtw0\kerning0
, things are a bit more complicated, since the 
\f1 \expnd0\expndtw0\kerning0
UIWebView
\f0 \expnd0\expndtw0\kerning0
 object alone is not enough to specify where the insertion should occur. In that case, an 
\f1 \expnd0\expndtw0\kerning0
NSDictionary
\f0 \expnd0\expndtw0\kerning0
 is used so that it can contain both the 
\f1 \expnd0\expndtw0\kerning0
UIWebView
\f0 \expnd0\expndtw0\kerning0
 and an ID or name of the HTML element where the fill-in snippet was triggered.\
\
The example app includes two different implementations of 
\f1 \expnd0\expndtw0\kerning0
SMTEFillDelegate
\f0 \expnd0\expndtw0\kerning0
, and demonstrates how to figure out which of two 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \expnd0\expndtw0\kerning0
 instances to pass a fill completion callback URL to.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Reminders\
\pard\pardeftab720

\b0 \cf0 \kerning1\expnd0\expndtw0 Prior to iOS 7, TextExpander used a persistent, named, UIPasteboard to share snippets and fill-in data with your app. As of iOS 7 this is no longer possible, so as of version 2.1, TextExpander now uses a completed Reminder to hold snippets (and another to hold fill-in data). These completed Reminders are dated August 25, 2009 (the day the TextExpander touch SDK was released) -- far enough in the past that users are unlikely to encounter these Reminders via casual usage.\
\
If you are already supporting TextExpander 2.0, the basic steps for adoption of 2.1 and Reminder sharing in iOS 6 and 7 are:
\f3\fs26 \cf3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340
\ls9\ilvl0
\f0\fs24 \cf0 {\listtext	1.	}Add EventKit to your app's linked frameworks
\f3\fs26 \cf3 \
\ls9\ilvl0
\f0\fs24 \cf0 {\listtext	2.	}Add an\'a0NSRemindersUsageDescription entry to your app's Info.plist file
\f3\fs26 \cf3 \
\ls9\ilvl0
\f0\fs24 \cf0 {\listtext	3.	}Update to the new\'a0TextExpander.framework
\f3\fs26 \cf3 \
\ls9\ilvl0
\f0\fs24 \cf0 {\listtext	4.	}Test on devices (because the simulator doesn't do Reminders permissions)
\f3\fs26 \cf3 \
\pard\pardeftab720

\f0\fs24 \cf0 To reset privacy permissions on a device for testing, visit Settings > General > Reset > Reset Location & Privacy.
\f3\fs26 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \kerning1\expnd0\expndtw0 To protect privacy, Apple requires the user to approve Reminder access by both your app and by TextExpander touch. If your app has not already been granted or denied access to Reminders, then when the TextExpander framework attempts to access the shared snippets, it will ask the system for Reminders access unless you 
\f1 setAllowRemindersAccessRequest: NO
\f0 . This blocks whatever thread it is running on (usually the main thread) and presents Apple's "Allow access to Reminders Yes/No" alert until the user makes a choice. Once the user chooses, this will alert will not appear again (unless the user Resets the permissions.)\
\
TextExpander defaults to allowing this Reminders access request since this is the easiest way -- the first time a decision is needed, the alert is presented. However, depending on how and when you instantiate the 
\f1 \expnd0\expndtw0\kerning0
SMTEDelegateController
\f0 \kerning1\expnd0\expndtw0  and add it as a delegate to your text view/field/etc., this alert's presentation and/or thread blocking may be an issue for your app. In that case, 
\f1 setAllowRemindersAccessRequest: NO
\f0  and call 
\f1 \CocoaLigature0 EKEventStore's requestAccessToEntityType:EKEntityTypeReminder 
\f0 \CocoaLigature1 at your convenience. Until Reminders access is granted, snippets will not expand on iOS 7, although they may work on iOS 6, since the named UIPasteboard still works there.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Testing Notes\
\pard\tx144\tx288\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li288\fi-288\sl288\slmult1\pardirnatural
\ls10\ilvl0
\b0 \cf0 \expnd0\expndtw0\kerning0
{\listtext	-	}If you use TextExpander for Mac OS X, you should probably disable it when testing in the iPhone Simulator, especially if you use your own snippets, as your abbreviations in the Simulator may conflict with those on Mac OS X.\
\pard\tx144\tx288\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li288\fi-288\sl288\slmult1\pardirnatural
\ls10\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	-	}\expnd0\expndtw0\kerning0
If you are running in the iOS/iPhone Simulator, you can expand the <UUID>.zip file in the "2.0" folder on GitHub into your [home]/Library/Application Support/iPhone Simulator/6.1/Applications folder while the simulator is not running, and then the TEtouch app should appear in your simulator. This allows you to create snippets and test fill-in snippets on the simulator.\
{\listtext	-	}You can enable some diagnostic/debug logging in the SDK by calling the 
\f1 \expnd0\expndtw0\kerning0
handleFillCompletionURL:
\f0 \expnd0\expndtw0\kerning0
 method with a URL like this:\uc0\u8232 
\f1 \expnd0\expndtw0\kerning0
[anyScheme]://x-callback-url/SMTEsetlog?log=[off|on|detailed]\uc0\u8232 
\f0 \expnd0\expndtw0\kerning0
The log setting resets to 
\f1 \expnd0\expndtw0\kerning0
off
\f0 \expnd0\expndtw0\kerning0
 when your app launches (when the SDK library is loaded).\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Support\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\sa120\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
Smile offers no promise of support for the TextExpander framework. If you have questions, please address them via email to {\field{\*\fldinst{HYPERLINK "mailto:textexpander-touch@smilesoftware.com"}}{\fldrslt \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 textexpander-touch@smilesoftware.com}}. As time and resources permit, we will attempt to answer such questions. Of course, if you are willing to add TextExpander support to your app, it is in our best interest to endeavor to support you.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
Stay informed about new versions of the TextExpander framework on this announcement-only Google Group: https://groups.google.com/forum/#!forum/tetouch-sdk\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
License Agreement\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
The TextExpander framework is Copyright \'a9 2009-2013 SmileOnMyMac, LLC dba Smile, and is supplied "AS IS" and without warranty. SmileOnMyMac, LLC disclaims all warranties, expressed or implied, including, without limitation the warranties of merchantability and of fitness for any purpose. SmileOnMyMac assumes no liability for direct, indirect, incidental, special, exemplary, or consequential damages, which may result from the use of the TextExpander framework, even if advised of the possibility of such damage.\
\
Permission is hereby granted to use, copy, and distribute this library, without fee, subject to the following restrictions:\
\pard\tx144\tx432\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li432\fi-432\sl288\slmult1\pardirnatural
\ls11\ilvl0\cf0 \expnd0\expndtw0\kerning0
{\listtext	1.	}The origin of this library must not be misrepresented\
{\listtext	2.	}Apps which use this library must indicate "Supports TextExpander touch snippet expansion" in their feature set or product description\
{\listtext	3.	}Apps which use this library must indicate "Contains TextExpander framework, Copyright \'a9 2009-2013 SmileOnMyMac, LLC dba Smile. TextExpander is a registered trademark of Smile" in their about box and the paragraph above in their license agreement. It is acceptable to link to the license agreement text posted on the app developer's website if that is more appropriate for a given app.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
\
If your app has special needs with respect to the above restrictions, please address them, preferably with specific suggestions, via email to {\field{\*\fldinst{HYPERLINK "mailto:textexpander-touch@smilesoftware.com"}}{\fldrslt \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 textexpander-touch@smilesoftware.com}}. Perhaps we can find a mutually agreeable solution.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Default Abbreviations & Snippets\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
aaddr: \
123 Market Street\
San Francisco, CA\
\
ddate:\
(day: no leading zero) (month: name) (year: 4 digits)\
\
sig1:\
Cheers,\
\
Jane Smith\
Senior Vice President\
Acme, Inc.\
\
sig2:\
Yours sincerely,\
\
Jane Smith\
PTA President\
Cupertino Elementary School\
\
sig3: (formatted text sample)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f4 \cf0 \expnd0\expndtw0\kerning0
Cheers,\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f5\i \cf0 \expnd0\expndtw0\kerning0
Jane Smith\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f4\i0 \cf0 \expnd0\expndtw0\kerning0
Senior Vice President\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Acme, Inc.
\b0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f0 \cf0 \expnd0\expndtw0\kerning0
\
sms1:\
I'm running late. Be there soon.\
\
sms2:\
Traffic is terrible. I'll be late. Sorry.\
\
sms3:\
I forgot all about our appointment. Can we reschedule?\
\
ttel:\
415-555-1212\
\
tyvm:\
Thank you very much!\
\
dnthx:  (fill-in example)\
Dear %filltext:name=person name:width:25%,\
\
Thank you for your generous donation of $%filltext:name=amount:width:4%. We greatly appreciate your help, and will use the funds for %fillpopup:name=popup 4:default=our educational program:our health clinic:general purposes%.\
\
Since we are a non-profit organization, your donation of $%filltext:name=amount:width:4% should be tax-deductible.\
\
Thank you,\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
Release Notes\
\
2.2.1 (2013-09-27)
\b0 \expnd0\expndtw0\kerning0
\
- Resolves crash on arm64 found when testing on iPhone 5S\

\b \expnd0\expndtw0\kerning0
\
2.2 (2013-09-25)
\b0 \expnd0\expndtw0\kerning0
\
- Respects settings modification date and so reduces reloading and never reloads when expanding a fill-in snippet\
- Positions properly when HTML tags in a plain text snippet are consumed by a UIWebView\
- Runs line ending related workarounds only when iOS 6 code is running on iOS 7, as those issues appear to be fixed when running iOS 7 code\
- In concert with TextExpander touch 2.2, resolves possible problem with sharing snippets when running with a non-Gregorian calendar\
- No longer includes SGDeviceHelper in the SDK, which also avoids namespace collision\
- Updates reminder checking mechanism in sample app\

\b \expnd0\expndtw0\kerning0
\
2.1 (2013-09-10)
\b0 \expnd0\expndtw0\kerning0
\
- Stores snippets in a completed reminder using EventKit\
- Your app must now link against EventKit\
- Adds +[SMTEDelegateController setAllowRemindersAccessRequest:] so that you can let TextExpander request reminders access or not as you wish\
- Updates description of +[SMTEDelegateController snippetsAreShared] as it performs differently now\
- Fixes numerous WebKit-related issues when running on iOS 7\
- Updates non-expansion character entry to use [UITextInput replaceRange:withText:] instead of setText or setAttributedText so as not to disturb the undo stack\
- Adds some Reminders-related code to the sample project\
- Adds workaround for UITextView drawing update issue to sample project
\b \expnd0\expndtw0\kerning0
\
\
2.0.1 (2013-05-31)
\b0 \expnd0\expndtw0\kerning0
\
- Fixes a problem in the 2.0 release where Ignore Case set to ON was ignored on initial SDK snippet load. Snippets would expand only in a case-sensitive fashion until switching to TEtouch and causing Shared Snippets to be updated, thus re-loading the snippets with proper case insensitivity.\
- Fixes problem where fill snippets embedded in other snippets did not work.\
- Fixes a crash expanding in UITextViews where 
\f2 \expnd0\expndtw0\kerning0
allowsEditingTextAttributes==YES
\f0 \expnd0\expndtw0\kerning0
 caused by 
\f2 \expnd0\expndtw0\kerning0
[UITextView.text length]
\f0 \expnd0\expndtw0\kerning0
 being longer than 
\f2 \expnd0\expndtw0\kerning0
[UITextView.attributedText length]
\f0 \expnd0\expndtw0\kerning0
 (Thanks, Apple! And note that ranges passed to 
\f2 \expnd0\expndtw0\kerning0
textView:shouldChangeTextInRange:replacementText:
\f0 \expnd0\expndtw0\kerning0
 can be beyond the end of the 
\f2 \expnd0\expndtw0\kerning0
attributedText 
\f0 \expnd0\expndtw0\kerning0
length.)\
- If your UITextView or UITextField implements these two methods:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\f2 \cf0 \expnd0\expndtw0\kerning0
   -(NSAttributedString*)textExpanderAttributedString;
\f0 \expnd0\expndtw0\kerning0
\

\f2 \expnd0\expndtw0\kerning0
   -(void)textExpanderSetAttributedString: (NSAttributedString*)newText;
\f0 \expnd0\expndtw0\kerning0
\
\pard\tx529\pardeftab529\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
TextExpander will use prefer to use those instead of 
\f2 \expnd0\expndtw0\kerning0
attributedText/setAttributedText:
\f0 \expnd0\expndtw0\kerning0
.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural
\cf0 \expnd0\expndtw0\kerning0
- Previous-to-2.0.1 versions of TEtouch re-wrote Shared Snippets every time the TEtouch app lost focus. This meant that 
\f2 \expnd0\expndtw0\kerning0
willEnterForeground 
\f0 \expnd0\expndtw0\kerning0
reloaded the snippets when your app re-gained focus during fill-in snippet app-switching. 2.0.1 makes this more efficient.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
2.0 (2013-05-15)
\b0 \expnd0\expndtw0\kerning0
\
- Adds support for fill-in snippets, if client app implements the 
\f1 \expnd0\expndtw0\kerning0
SMTEFillDelegate
\f0 \expnd0\expndtw0\kerning0
 protocol and provides a URL scheme.\
- Adds support for formatted text snippets.\
- Adds 
\f2 \expnd0\expndtw0\kerning0
expandPlainTextOnly
\f0 \expnd0\expndtw0\kerning0
 which defaults to 
\f2 \expnd0\expndtw0\kerning0
NO
\f0 \expnd0\expndtw0\kerning0
 and is respected in the expansion/delegate methods\
- Adds 
\f2 \expnd0\expndtw0\kerning0
- (NSAttributedString*)attributedStringByExpandingAbbreviations:(NSAttributedString*)inString;
\f0 \expnd0\expndtw0\kerning0
\
- Cursor position macro (%|) now works in UITextField and HTML (Previously only worked in UITextView. Impossible in UISearchBar.)\
- Adds support for selection range macro (ie. %| select this text %\\ )\
- Fixes problem where cursor would jump to start of a UITextField after an expansion\
- Fixes failure to expand immediately after Cut/Delete of a selection range or immediately after a previous expansion\
- 
\f2 \expnd0\expndtw0\kerning0
stringByExpandingAbbreviations:
\f0 \expnd0\expndtw0\kerning0
 now returns an autoreleased string (previously returned a retained string)\
- Fixes problem where 
\f2 \expnd0\expndtw0\kerning0
snippetsAreShared
\f0 \expnd0\expndtw0\kerning0
 could incorrectly return 
\f2 \expnd0\expndtw0\kerning0
YES
\f0 \expnd0\expndtw0\kerning0
 when TEtouch has been installed but never launched\
- sample project includes two different implementations of fill-in support\
- sample project includes a simplistic input accessory view for the iPad's UITextView showing how to insert text in a way that the SDK understands as typing\
- requires iOS 5.1 or later/Xcode 4.3 or later (use SDK version 1.2.3 for iOS 3.1/Xcode 3.2.3)\
\

\b \expnd0\expndtw0\kerning0
1.2.3 (2012-10-14)
\b0 \expnd0\expndtw0\kerning0
\
- Adds support for contentEditable / designMode in UIWebViews\
- UITextView delegate methods can handle attributed strings in UITextViews on iOS 6\
- UITextField delegate methods can handle attributed strings in UITextFields on iOS 6\
- Adds read only property isAttemptingToExpandText which can be tested within the nextDelegate\
- Adds stringByExpandingAbbreviations method for DIY expansion\
- CHANGE: UITextView / UITextField delegate methods can handle NSAttributedStrings for pre-iOS 6 UITextViews, but only if the UITextView / UITextField subclass implements textExpanderAttributedString and setTextExpanderAttributedString: -- this ensures TextExpander does not attempt to call attributedString or setAttributedString:, which may be private methods of the UITextView / UITextField class\
- Removes support for armv6 (use 1.2.2 SDK if you must continue to offer armv6 support)
\b \expnd0\expndtw0\kerning0
\
\
1.2.2 (2012-09-13)
\b0 \expnd0\expndtw0\kerning0
\
- Adds armv7s architecture to support iPhone 5\
\

\b \expnd0\expndtw0\kerning0
1.2.1 (2012-08-28)
\b0 \expnd0\expndtw0\kerning0
\
- Fixes case where if the first letter typed in UISearchBar begins an abbreviation, the snippet does not expand. (Thanks Tim Ekl.)\
\

\b \expnd0\expndtw0\kerning0
1.2 (2012-06-30)
\b0 \expnd0\expndtw0\kerning0
\
- UITextView delegate methods can handle NSAttributedStrings so that TextExpander can work with EGOTextView\
- Adds support for old-style time zone formatting: %z and %Z\
- Repackaged TextExpander as universal framework to simplify building\
- Updates company name in Read Me file, as we've been dba Smile for quite some time\
\

\b \expnd0\expndtw0\kerning0
1.1.7 (2011-01-25)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
- Adds class method to disable expansion + [SMTEDelegateController setExpansionEnabled:]\
- Fixes problem where use in a web form field would disable the Go button for submit\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
1.1.6 (2010-08-07)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
- Adds support for multitasking apps to inform TextExpander touch when returning to the foreground [SMTEDelegateController willEnterForeground:]\
- Adds support for TextExpander touch functionality in UISearchBar; see "tetest" example app\
- Fixes date format problem with literals between the formatting and added support for explicit %date:%\
- Only disable and re-enable scroll if it's already actually enabled. (Thanks Kent Sutherland.)\
- Fixes copy/paste problem which caused incorrect backspace handling for UITextFields. (Thanks David Reed.)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
NOTE: 
\b0 \expnd0\expndtw0\kerning0
The iPhone Simulator shipped with Xcode 3.2.3 has a different ABI than previous releases. It MUST link against the libteEngine.a in the Simulator4 folder. We've removed the Simulator folder from this build to avoid confusion. We have confirmed with Apple that the ABI change affects only the Simuatlor and that static libraries compiled for iOS 3 will run properly when linked with iOS 4 targets.\
\

\b \expnd0\expndtw0\kerning0
1.1.5 (2010-05-27)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
- Added preliminary support for TextExpander touch functionality in UIWebViews; see "tetest" example app; feedback welcome\
- Added resetKeyLog method to SMTEDelegateController in case you need to clear the key log\
- Added support for building for the iPhone OS 4 (beta) Simulator target\
- Fixed method forwarding to the nextDelegate such that, for example, textFieldDidBecomeFirstResponder: sent to a UITextField delegate inside a UITableViewCell is handled properly\
- Clear key log when the clear button is tapped on a UITextField (so that an immediately typed abbreviation expands properly)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
1.1.4 (2010-03-23)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
- SMTEDelegateController no longer retains nextDelegate
\b \expnd0\expndtw0\kerning0
\

\b0 \expnd0\expndtw0\kerning0
- nextDelegate now receives and responds to shouldChange\'85 delegate methods reflecting what TextExpander is about to do (before, no message was sent)\
- Added optional (on by default) support for Undo
\b \expnd0\expndtw0\kerning0
\

\b0 \expnd0\expndtw0\kerning0
- Updated SMTEDelegateController.h header to show nextDelegate and provideUndoSupport properties\
- Added +[SMTEDelegateController isTextExpanderTouchInstalled], which returns YES when TextExpander touch is installed on the device\
- Added +[SMTEDelegateController snippetsAreShared], which returns YES when "Share Snippets" is enabled in TextExpander touch\
- Removed dependency on AddressBook framework (was there for compatibility with TextExpander 1.0)\
- Added iPad target to sample project\
- Removed .svn folders from teTouchSDK folder\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
1.1.3 (2010-02-08)
\b0 \expnd0\expndtw0\kerning0
\
- Fix crashing bug when %| is the first character\
- Fix crashing bug when pasted text length is less than replacement length\
- Expand for paste-and-replace as we do for paste\
\

\b \expnd0\expndtw0\kerning0
1.1.2 (2009-11-06)
\b0 \expnd0\expndtw0\kerning0
\
- Add support for absolute cursor positioning (%|)\
- Fix crash when large amounts of content is pasted into TextExpander delegate UITextViews\
- Fix subsequent expansions when expand immediately is off (space was not being restored to the key log when there was no snippet match)\
- Fix escaping of % (%% was not expanding to % as it should)\
\

\b \expnd0\expndtw0\kerning0
1.1.1.1 (2009-10-13)
\b0 \expnd0\expndtw0\kerning0
\
- Fix handling of case where optional UITextViewDelegate methods aren't called (as when a developer subclasses UITextView and does not call them)\
- Added step 12 above re: linking with AddressBook and AudioToolkit frameworks\
\

\b \expnd0\expndtw0\kerning0
1.1.1 (2009-10-05)
\b0 \expnd0\expndtw0\kerning0
\
- Respects "Play Sound" preference\
- Added step 11 above to explain linking against the TextExpander engine\
\

\b \expnd0\expndtw0\kerning0
1.1 (2009-09-10)
\b0 \expnd0\expndtw0\kerning0
\
- Favors UIPasteboard to read snippet data when available\
	(TextExpander touch 1.1 will write snippet data there instead of to Address Book)\
- Respects TextExpander touch settings for "Ignore Case" and "Expand Immediately" as of TextExpander touch 1.1\
- NOTE: Please be sure to do clean build with updated libraries\
- NOTE: This library will work with TextExpander 1.0.1 / Address Book. It will work better with 1.1 / UIPasteboard.\
\

\b \expnd0\expndtw0\kerning0
1.0.2 (2009-08-31)
\b0 \expnd0\expndtw0\kerning0
\
- Mea culpa update -- zip file for 1.0.1 was incorrect\
\

\b \expnd0\expndtw0\kerning0
1.0.1 (2009-08-30)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
- Updated teTouchSDK sample to use build setting conditions so that you need not manually rename the libteEngine.a library \
- Updated libteEngine so that SMTEDelegateController conforms to the UIScrollView protocol (and passes on delegate method calls to nextDelegate)\
- Updated libteEngine so that if the nextDelegate responds to a method SMTEDelegateController will call through to nextDelegate (in an attempt to future-proof the delegate protocols)\
- Fixed bug so that if the user pastes a defined abbreviation it works (as of 1.0, it either crashed or got the replacement cursor positioning wrong; this fix will be in TextExpander touch 1.1; you get it early)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
\
1.0 (2009-08-24)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\sl288\slmult1\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
First public release.\
}